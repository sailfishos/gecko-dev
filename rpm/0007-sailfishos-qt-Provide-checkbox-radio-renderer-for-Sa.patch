From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Pavel Tumakaev <p.tumakaev@omprussia.ru>
Date: Tue, 11 May 2021 15:06:45 +0300
Subject: [PATCH] [sailfishos][qt] Provide checkbox/radio renderer for Sailfish
 OS. Contributes to JB#52183

Adds a Sailfish OS specific renderer for checkboxes and radio buttons.
The rendering is similar to the Android rendering, drawn directly using
gecko's internal drawing methods.

GetWidgetPadding now returns LayoutDeviceIntMargin.
See upstream commit: 6e331b1d1daeada0cdc23a59ad5b3e055c85b38e

GetWidgetBorder now returns LayoutDeviceIntMargin.
See upstream commit: 8f2a5e19c96914f9ddc82d2409266eba0bb21270

XPCOM component registration for the native theme renderer has been removed.
See upstream commit: 8d7c2999dc0d0b481326a7f23aa6a3ee05d14011

Now mozilla::StyleAppearance type is used for aWidgetType parameter.
See upstream commits:
    517256e3659ee98932a68ad97244793bc3ad67dc
    587108c41f60a5c28be4794b5c6eacc9491e2265

aWidgetType has been renamed to aAppearance.
See upstream commit: b5bfd3a7eaed7c56977870387ba53635a79a1db5

Added support for widget.disable-native-theme-for-content.
See upstream commit: b66090cb02cd112d43e5ed1b052bbaa880abfb89

gfx::Color has been splitted into sRGBColor and DeviceColor.
See upstream commit: 91b071ed1489ff8f8eeb87224ca3ac4a207135a6

do_GetNativeTheme renamed to do_GetNativeThemeDoNotUseDirectly.
See upstream commit: 741c54ae79ad51e5f54436e4cfa7e2851cdc9e69

MOZ_MUST_USE has been replaced with [[nodiscard]].
See upstream commit: 162b8c84909ca0e17df98a6a18442da5ebaa55a2

Co-authored-by: David Llewellyn-Jones <david@flypig.co.uk>
---
 layout/style/res/forms.css    |   4 +
 widget/qt/QtColors.h          |  23 +++
 widget/qt/nsNativeThemeQt.cpp | 317 ++++++++++++++++++++++++++++++++++
 widget/qt/nsNativeThemeQt.h   |  67 +++++++
 4 files changed, 411 insertions(+)
 create mode 100644 widget/qt/QtColors.h
 create mode 100644 widget/qt/nsNativeThemeQt.cpp
 create mode 100644 widget/qt/nsNativeThemeQt.h

diff --git a/layout/style/res/forms.css b/layout/style/res/forms.css
index e1fee756e7e0..74f4610ad97e 100644
--- a/layout/style/res/forms.css
+++ b/layout/style/res/forms.css
@@ -479,6 +479,8 @@ input[type=radio] {
   -moz-default-appearance: radio;
   margin-block: 3px 0;
   margin-inline: 5px 3px;
+  width: 16px;
+  height: 16px;
 }
 
 /* check boxes */
@@ -487,6 +489,8 @@ input[type=checkbox] {
   -moz-default-appearance: checkbox;
   margin-block: 3px;
   margin-inline: 4px 3px;
+  width: 16px;
+  height: 16px;
 }
 
 /* Common features of radio buttons and check boxes */
diff --git a/widget/qt/QtColors.h b/widget/qt/QtColors.h
new file mode 100644
index 000000000000..9fdcc95b24a6
--- /dev/null
+++ b/widget/qt/QtColors.h
@@ -0,0 +1,23 @@
+/* -*- Mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2; -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_widget_QtColors_h
+#define mozilla_widget_QtColors_h
+
+#include "mozilla/gfx/2D.h"
+
+namespace mozilla {
+namespace widget {
+
+static const gfx::sRGBColor sQtBackgroundColor(gfx::sRGBColor(1.0f, 1.0f, 1.0f));
+static const gfx::sRGBColor sQtBorderColor(gfx::sRGBColor(0.73f, 0.73f, 0.73f));
+static const gfx::sRGBColor sQtCheckColor(gfx::sRGBColor(0.19f, 0.21f, 0.23f));
+static const gfx::sRGBColor sQtDisabledColor(gfx::sRGBColor(0.88f, 0.88f, 0.88f));
+static const gfx::sRGBColor sQtActiveColor(gfx::sRGBColor(0.94f, 0.94f, 0.94f));
+
+}  // namespace widget
+}  // namespace mozilla
+
+#endif  // mozilla_widget_QtColors_h
diff --git a/widget/qt/nsNativeThemeQt.cpp b/widget/qt/nsNativeThemeQt.cpp
new file mode 100644
index 000000000000..fd8ffc102288
--- /dev/null
+++ b/widget/qt/nsNativeThemeQt.cpp
@@ -0,0 +1,317 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "nsNativeThemeQt.h"
+
+#include "nsIFrame.h"
+#include "nsStyleConsts.h"
+#include "QtColors.h"
+#include "nsCSSRendering.h"
+#include "PathHelpers.h"
+#include "nsLayoutUtils.h"
+#include "mozilla/ClearOnShutdown.h"
+#include "mozilla/StaticPrefs_widget.h"
+#include "nsNativeBasicTheme.h"
+
+NS_IMPL_ISUPPORTS_INHERITED(nsNativeThemeQt, nsNativeTheme, nsITheme)
+
+using namespace mozilla;
+using namespace mozilla::gfx;
+
+static const Float STROKE_WIDTH = Float(4.0f);
+static const Float RECT_RADII = Float(2.0f);
+static const int32_t RADIO_CHECK_DEFLATION = 3;
+static const int32_t RADIO_BORDER_DEFLATION = 2;
+static const CSSIntCoord SCROLL_BAR_SIZE = 17;
+
+
+
+static void ClampRectAndMoveToCenter(nsRect& aRect) {
+  if (aRect.width < aRect.height) {
+    aRect.y += (aRect.height - aRect.width) / 2;
+    aRect.height = aRect.width;
+    return;
+  }
+
+  if (aRect.height < aRect.width) {
+    aRect.x += (aRect.width - aRect.height) / 2;
+    aRect.width = aRect.height;
+  }
+}
+
+static void PaintCheckboxControl(nsIFrame* aFrame, DrawTarget* aDrawTarget,
+                                 const nsRect& aRect,
+                                 const EventStates& aState) {
+  // We fake native drawing of appearance: checkbox items out
+  // here, and use hardcoded colours from QtColors.h to
+  // simulate native theming.
+  RectCornerRadii innerRadii(RECT_RADII);
+  nsRect paddingRect =
+      nsCSSRendering::GetBoxShadowInnerPaddingRect(aFrame, aRect);
+  const nscoord twipsPerPixel = aFrame->PresContext()->DevPixelsToAppUnits(1);
+  Rect shadowGfxRect = NSRectToRect(paddingRect, twipsPerPixel);
+  shadowGfxRect.Round();
+  RefPtr<Path> roundedRect =
+      MakePathForRoundedRect(*aDrawTarget, shadowGfxRect, innerRadii);
+
+  aDrawTarget->Fill(
+      roundedRect,
+      ColorPattern(ToDeviceColor(mozilla::widget::sQtBackgroundColor)));
+  if (aState.HasState(NS_EVENT_STATE_DISABLED)) {
+    aDrawTarget->Fill(
+        roundedRect,
+        ColorPattern(ToDeviceColor(mozilla::widget::sQtDisabledColor)));
+  } else if (aState.HasState(NS_EVENT_STATE_ACTIVE)) {
+    aDrawTarget->Fill(
+        roundedRect,
+        ColorPattern(ToDeviceColor(mozilla::widget::sQtActiveColor)));
+  }
+  aDrawTarget->Stroke(
+      roundedRect,
+      ColorPattern(ToDeviceColor(mozilla::widget::sQtBorderColor)),
+      StrokeOptions(STROKE_WIDTH));
+}
+
+static void PaintCheckMark(nsIFrame* aFrame, DrawTarget* aDrawTarget,
+                           const nsRect& aRect) {
+
+  // Points come from the coordinates on a 7X7 unit box centered at 0,0
+  const int32_t checkPolygonX[] = {-3, -1, 3, 3, -1, -3};
+  const int32_t checkPolygonY[] = {-1, 1, -3, -1, 3, 1};
+  const int32_t checkNumPoints = sizeof(checkPolygonX) / sizeof(int32_t);
+  const int32_t checkSize = 9;  // 2 units of padding on either side
+                                // of the 7x7 unit checkmark
+
+  // Scale the checkmark based on the smallest dimension
+  nscoord paintScale = std::min(aRect.width, aRect.height) / checkSize;
+  nsPoint paintCenter(aRect.x + aRect.width / 2, aRect.y + aRect.height / 2);
+
+  RefPtr<PathBuilder> builder = aDrawTarget->CreatePathBuilder();
+  nsPoint p = paintCenter + nsPoint(checkPolygonX[0] * paintScale,
+                                    checkPolygonY[0] * paintScale);
+
+  int32_t appUnitsPerDevPixel = aFrame->PresContext()->AppUnitsPerDevPixel();
+  builder->MoveTo(NSPointToPoint(p, appUnitsPerDevPixel));
+  for (int32_t polyIndex = 1; polyIndex < checkNumPoints; polyIndex++) {
+    p = paintCenter + nsPoint(checkPolygonX[polyIndex] * paintScale,
+                              checkPolygonY[polyIndex] * paintScale);
+    builder->LineTo(NSPointToPoint(p, appUnitsPerDevPixel));
+  }
+  RefPtr<Path> path = builder->Finish();
+  aDrawTarget->Fill(
+      path, ColorPattern(ToDeviceColor(mozilla::widget::sQtCheckColor)));
+}
+
+static void PaintIndeterminateMark(nsIFrame* aFrame, DrawTarget* aDrawTarget,
+                                   const nsRect& aRect) {
+  int32_t appUnitsPerDevPixel = aFrame->PresContext()->AppUnitsPerDevPixel();
+
+  nsRect rect(aRect);
+  rect.y += (rect.height - rect.height / 4) / 2;
+  rect.height /= 4;
+
+  Rect devPxRect = NSRectToSnappedRect(rect, appUnitsPerDevPixel, *aDrawTarget);
+
+  aDrawTarget->FillRect(
+      devPxRect,
+      ColorPattern(ToDeviceColor(mozilla::widget::sQtCheckColor)));
+}
+
+static void PaintRadioControl(nsIFrame* aFrame, DrawTarget* aDrawTarget,
+                              const nsRect& aRect, const EventStates& aState) {
+  // We fake native drawing of appearance: radio items out
+  // here, and use hardcoded colours from QtColors.h to
+  // simulate native theming.
+  const nscoord twipsPerPixel = aFrame->PresContext()->DevPixelsToAppUnits(1);
+  Rect devPxRect = NSRectToRect(aRect, twipsPerPixel);
+  devPxRect.Deflate(RADIO_BORDER_DEFLATION);
+
+  RefPtr<PathBuilder> builder = aDrawTarget->CreatePathBuilder();
+  AppendEllipseToPath(builder, devPxRect.Center(), devPxRect.Size());
+  RefPtr<Path> ellipse = builder->Finish();
+
+  aDrawTarget->Fill(
+      ellipse,
+      ColorPattern(ToDeviceColor(mozilla::widget::sQtBackgroundColor)));
+
+  if (aState.HasState(NS_EVENT_STATE_DISABLED)) {
+    aDrawTarget->Fill(
+        ellipse,
+        ColorPattern(ToDeviceColor(mozilla::widget::sQtDisabledColor)));
+  } else if (aState.HasState(NS_EVENT_STATE_ACTIVE)) {
+    aDrawTarget->Fill(
+        ellipse,
+        ColorPattern(ToDeviceColor(mozilla::widget::sQtActiveColor)));
+  }
+  aDrawTarget->Stroke(
+      ellipse,
+      ColorPattern(ToDeviceColor(mozilla::widget::sQtBorderColor)),
+      StrokeOptions(STROKE_WIDTH));
+}
+
+static void PaintCheckedRadioButton(nsIFrame* aFrame, DrawTarget* aDrawTarget,
+                                    const nsRect& aRect) {
+  // The dot is an ellipse RADIO_CHECK_DEFLATION px on all sides
+  // smaller than the content-box, drawn in the foreground color.
+  nsRect rect(aRect);
+  rect.Deflate(nsPresContext::CSSPixelsToAppUnits(RADIO_CHECK_DEFLATION));
+
+  Rect devPxRect = ToRect(nsLayoutUtils::RectToGfxRect(
+      rect, aFrame->PresContext()->AppUnitsPerDevPixel()));
+
+  RefPtr<PathBuilder> builder = aDrawTarget->CreatePathBuilder();
+  AppendEllipseToPath(builder, devPxRect.Center(), devPxRect.Size());
+  RefPtr<Path> ellipse = builder->Finish();
+  aDrawTarget->Fill(
+      ellipse,
+      ColorPattern(ToDeviceColor(mozilla::widget::sQtCheckColor)));
+}
+
+NS_IMETHODIMP
+nsNativeThemeQt::DrawWidgetBackground(gfxContext* aContext, nsIFrame* aFrame,
+                                      StyleAppearance aWidgetType,
+                                      const nsRect& aRect, const nsRect& aDirtyRect,
+                                      DrawOverflow) {
+  EventStates eventState = GetContentState(aFrame, aWidgetType);
+  nsRect rect(aRect);
+  ClampRectAndMoveToCenter(rect);
+
+  switch (aWidgetType) {
+    case StyleAppearance::Radio:
+      PaintRadioControl(aFrame, aContext->GetDrawTarget(), rect, eventState);
+      if (IsSelected(aFrame)) {
+        PaintCheckedRadioButton(aFrame, aContext->GetDrawTarget(), rect);
+      }
+      break;
+    case StyleAppearance::Checkbox:
+      PaintCheckboxControl(aFrame, aContext->GetDrawTarget(), rect, eventState);
+      if (IsChecked(aFrame)) {
+        PaintCheckMark(aFrame, aContext->GetDrawTarget(), rect);
+      }
+      if (GetIndeterminate(aFrame)) {
+        PaintIndeterminateMark(aFrame, aContext->GetDrawTarget(), rect);
+      }
+      break;
+    default:
+      MOZ_ASSERT_UNREACHABLE(
+          "Should not get here with a widget type we don't support.");
+      return NS_ERROR_NOT_IMPLEMENTED;
+  }
+  return NS_OK;
+}
+
+auto nsNativeThemeQt::GetScrollbarSizes(nsPresContext* aPresContext,
+                                        StyleScrollbarWidth aWidth,
+                                        Overlay aOverlay) -> ScrollbarSizes {
+  int32_t size = aPresContext->CSSPixelsToDevPixels(SCROLL_BAR_SIZE);
+  return {size, size};
+}
+
+LayoutDeviceIntMargin nsNativeThemeQt::GetWidgetBorder(
+    nsDeviceContext* aContext, nsIFrame* aFrame, StyleAppearance aWidgetType) {
+  return LayoutDeviceIntMargin();
+}
+
+bool nsNativeThemeQt::GetWidgetPadding(nsDeviceContext* aContext,
+                                            nsIFrame* aFrame,
+                                            StyleAppearance aWidgetType,
+                                            LayoutDeviceIntMargin* aResult) {
+  switch (aWidgetType) {
+    // Radios and checkboxes return a fixed size in GetMinimumWidgetSize
+    // and have a meaningful baseline, so they can't have
+    // author-specified padding.
+    case StyleAppearance::Checkbox:
+    case StyleAppearance::Radio:
+      aResult->SizeTo(0, 0, 0, 0);
+      return true;
+    default:
+      return false;
+  }
+}
+
+bool nsNativeThemeQt::GetWidgetOverflow(nsDeviceContext* aContext,
+                                             nsIFrame* aFrame,
+                                             StyleAppearance aWidgetType,
+                                             nsRect* aOverflowRect) {
+  return false;
+}
+
+NS_IMETHODIMP
+nsNativeThemeQt::GetMinimumWidgetSize(nsPresContext* aPresContext,
+                                           nsIFrame* aFrame,
+                                           StyleAppearance aWidgetType,
+                                           LayoutDeviceIntSize* aResult,
+                                           bool* aIsOverridable) {
+  if (aWidgetType == StyleAppearance::Radio ||
+      aWidgetType == StyleAppearance::Checkbox) {
+    // 9px + (1px padding + 1px border) * 2
+    aResult->width = aPresContext->CSSPixelsToDevPixels(13);
+    aResult->height = aPresContext->CSSPixelsToDevPixels(13);
+  }
+
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+nsNativeThemeQt::WidgetStateChanged(nsIFrame* aFrame,
+                                         StyleAppearance aWidgetType,
+                                         nsAtom* aAttribute,
+                                         bool* aShouldRepaint,
+                                         const nsAttrValue* aOldValue) {
+  if (aWidgetType == StyleAppearance::Radio ||
+      aWidgetType == StyleAppearance::Checkbox) {
+    if (aAttribute == nsGkAtoms::active || aAttribute == nsGkAtoms::disabled ||
+        aAttribute == nsGkAtoms::hover) {
+      *aShouldRepaint = true;
+      return NS_OK;
+    }
+  }
+
+  *aShouldRepaint = false;
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+nsNativeThemeQt::ThemeChanged() { return NS_OK; }
+
+NS_IMETHODIMP_(bool)
+nsNativeThemeQt::ThemeSupportsWidget(nsPresContext* aPresContext,
+                                          nsIFrame* aFrame,
+                                          StyleAppearance aWidgetType) {
+  switch (aWidgetType) {
+    case StyleAppearance::Radio:
+    case StyleAppearance::Checkbox:
+      return true;
+    default:
+      return false;
+  }
+}
+
+NS_IMETHODIMP_(bool)
+nsNativeThemeQt::WidgetIsContainer(StyleAppearance aWidgetType) {
+  return false;
+}
+
+bool nsNativeThemeQt::ThemeDrawsFocusForWidget(
+    StyleAppearance aWidgetType) {
+  return false;
+}
+
+bool nsNativeThemeQt::ThemeNeedsComboboxDropmarker() { return false; }
+
+nsITheme::Transparency nsNativeThemeQt::GetWidgetTransparency(
+    nsIFrame* aFrame, StyleAppearance aWidgetType) {
+  return eUnknownTransparency;
+}
+
+already_AddRefed<nsITheme> do_GetNativeThemeDoNotUseDirectly() {
+  static nsCOMPtr<nsITheme> inst;
+
+  if (!inst) {
+    inst = new nsNativeThemeQt();
+    ClearOnShutdown(&inst);
+  }
+
+  return do_AddRef(inst);
+}
diff --git a/widget/qt/nsNativeThemeQt.h b/widget/qt/nsNativeThemeQt.h
new file mode 100644
index 000000000000..47b845f7e04f
--- /dev/null
+++ b/widget/qt/nsNativeThemeQt.h
@@ -0,0 +1,67 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef nsNativeThemeQt_h_
+#define nsNativeThemeQt_h_
+
+#include "nsITheme.h"
+#include "nsNativeTheme.h"
+
+class nsNativeThemeQt final : private nsNativeTheme, public nsITheme {
+ public:
+  NS_DECL_ISUPPORTS_INHERITED
+
+  // The nsITheme interface.
+  NS_IMETHOD DrawWidgetBackground(gfxContext* aContext, nsIFrame* aFrame,
+                                  StyleAppearance aWidgetType,
+                                  const nsRect& aRect, const nsRect& aDirtyRect,
+                                  DrawOverflow = DrawOverflow::Yes) override;
+
+  ScrollbarSizes GetScrollbarSizes(nsPresContext*, StyleScrollbarWidth,
+                                   Overlay) override;
+
+  [[nodiscard]] LayoutDeviceIntMargin GetWidgetBorder(
+      nsDeviceContext* aContext, nsIFrame* aFrame,
+      StyleAppearance aWidgetType) override;
+
+  bool GetWidgetPadding(nsDeviceContext* aContext, nsIFrame* aFrame,
+                        StyleAppearance aWidgetType,
+                        LayoutDeviceIntMargin* aResult) override;
+
+  bool GetWidgetOverflow(nsDeviceContext* aContext, nsIFrame* aFrame,
+                         StyleAppearance aWidgetType,
+                         nsRect* aOverflowRect) override;
+
+  NS_IMETHOD GetMinimumWidgetSize(nsPresContext* aPresContext, nsIFrame* aFrame,
+                                  StyleAppearance aAppearance,
+                                  mozilla::LayoutDeviceIntSize* aResult,
+                                  bool* aIsOverridable) override;
+
+  NS_IMETHOD WidgetStateChanged(nsIFrame* aFrame, StyleAppearance aWidgetType,
+                                nsAtom* aAttribute, bool* aShouldRepaint,
+                                const nsAttrValue* aOldValue) override;
+
+  NS_IMETHOD ThemeChanged() override;
+
+  NS_IMETHOD_(bool)
+  ThemeSupportsWidget(nsPresContext* aPresContext, nsIFrame* aFrame,
+                      StyleAppearance aWidgetType) override;
+
+  NS_IMETHOD_(bool) WidgetIsContainer(StyleAppearance aWidgetType) override;
+
+  NS_IMETHOD_(bool)
+  ThemeDrawsFocusForWidget(StyleAppearance aWidgetType) override;
+
+  bool ThemeNeedsComboboxDropmarker() override;
+
+  Transparency GetWidgetTransparency(nsIFrame* aFrame,
+                                     StyleAppearance aWidgetType) override;
+
+  nsNativeThemeQt() {}
+
+ protected:
+  virtual ~nsNativeThemeQt() {}
+};
+
+#endif  // nsNativeThemeQt_h_

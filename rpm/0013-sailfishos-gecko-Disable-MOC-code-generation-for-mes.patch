From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Pavel Tumakaev <p.tumakaev@omprussia.ru>
Date: Mon, 15 Feb 2021 19:11:51 +0300
Subject: [PATCH] [sailfishos][gecko] Disable MOC code generation for
 message_pump_qt

This patch removes signals/slots from MessagePumpQt and disables MOC code
generation for message_pump_qt.

Signed-off-by: Pavel Tumakaev <p.tumakaev@omprussia.ru>
---
 ipc/chromium/moz.build                   |  1 -
 ipc/chromium/src/base/message_pump_qt.cc | 22 +++++++++++++---------
 ipc/chromium/src/base/message_pump_qt.h  | 10 +++++-----
 3 files changed, 18 insertions(+), 15 deletions(-)

diff --git a/ipc/chromium/moz.build b/ipc/chromium/moz.build
index 383d656b751d..58019e16ca8a 100644
--- a/ipc/chromium/moz.build
+++ b/ipc/chromium/moz.build
@@ -119,7 +119,6 @@ if os_bsd or os_linux:
         ]
     if CONFIG['MOZ_ENABLE_QT']:
         SOURCES += [
-            '!moc_message_pump_qt.cc',
             'src/base/message_pump_qt.cc',
         ]
 
diff --git a/ipc/chromium/src/base/message_pump_qt.cc b/ipc/chromium/src/base/message_pump_qt.cc
index d96e2c5e6217..4b799a73f0cc 100644
--- a/ipc/chromium/src/base/message_pump_qt.cc
+++ b/ipc/chromium/src/base/message_pump_qt.cc
@@ -8,7 +8,6 @@
 #include <qevent.h>
 #include <QCoreApplication>
 #include <QThread>
-#include <qtimer.h>
 
 #include "base/message_pump_qt.h"
 
@@ -32,16 +31,20 @@ MessagePumpForUI::MessagePumpForUI() : state_(NULL), qt_pump(*this) {}
 MessagePumpForUI::~MessagePumpForUI() {}
 
 MessagePumpQt::MessagePumpQt(MessagePumpForUI& aPump)
-    : pump(aPump), mTimer(new QTimer(this)) {
+    : pump(aPump), timerId(0) {
   // Register our custom event type, to use in qApp event loop
   sPokeEvent = QEvent::registerEventType();
-  connect(mTimer, SIGNAL(timeout()), this, SLOT(dispatchDelayed()));
-  mTimer->setSingleShot(true);
 }
 
 MessagePumpQt::~MessagePumpQt() {
-  mTimer->stop();
-  delete mTimer;
+}
+
+void MessagePumpQt::timerEvent(QTimerEvent* event) {
+  if (event->timerId() == timerId) {
+    killTimer(timerId);
+    timerId = 0;
+    dispatchDelayed();
+  }
 }
 
 bool MessagePumpQt::event(QEvent* e) {
@@ -58,8 +61,9 @@ void MessagePumpQt::scheduleDelayedIfNeeded(
     return;
   }
 
-  if (mTimer->isActive()) {
-    mTimer->stop();
+  if (timerId != 0) {
+    killTimer(timerId);
+    timerId = 0;
   }
 
   TimeDelta later = delayed_work_time - TimeTicks::Now();
@@ -68,7 +72,7 @@ void MessagePumpQt::scheduleDelayedIfNeeded(
   int laterMsecs = later.InMilliseconds() > std::numeric_limits<int>::max()
                        ? std::numeric_limits<int>::max()
                        : later.InMilliseconds();
-  mTimer->start(laterMsecs > 0 ? laterMsecs : 0);
+  timerId = startTimer(laterMsecs > 0 ? laterMsecs : 0);
 }
 
 void MessagePumpQt::dispatchDelayed() { pump.HandleDispatch(); }
diff --git a/ipc/chromium/src/base/message_pump_qt.h b/ipc/chromium/src/base/message_pump_qt.h
index b96af80bc21e..bb91a8cc155a 100644
--- a/ipc/chromium/src/base/message_pump_qt.h
+++ b/ipc/chromium/src/base/message_pump_qt.h
@@ -12,14 +12,13 @@
 #include "base/message_pump.h"
 #include "base/time.h"
 
-class QTimer;
+class QTimerEvent;
 
 namespace base {
 
 class MessagePumpForUI;
 
 class MessagePumpQt : public QObject {
-  Q_OBJECT
 
  public:
   MessagePumpQt(MessagePumpForUI& pump);
@@ -27,13 +26,14 @@ class MessagePumpQt : public QObject {
 
   virtual bool event(QEvent* e);
   void scheduleDelayedIfNeeded(const TimeTicks& delayed_work_time);
-
- public Q_SLOTS:
   void dispatchDelayed();
 
  private:
   base::MessagePumpForUI& pump;
-  QTimer* mTimer;
+  int timerId;
+
+ protected:
+  void timerEvent(QTimerEvent *event);
 };
 
 // This class implements a MessagePump needed for TYPE_UI MessageLoops on

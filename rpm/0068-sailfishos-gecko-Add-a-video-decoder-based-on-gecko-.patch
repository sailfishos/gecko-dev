From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Denis Grigorev <d.grigorev@omprussia.ru>
Date: Thu, 16 Dec 2021 19:10:25 +0300
Subject: [PATCH] [sailfishos][gecko] Add a video decoder based on
 gecko-camera. JB#56755

Adds a new video decoder plugin that makes use of gecko-camera.

[sailfishos][gecko] Properly fill out videoframe buffer in GeckoCameraVideoDecoder

When decoding video there are several fields (YUV colour space; colour
depth; colour range) that were being left as their default values. This
caused discolouration of the video output. With this change the values
are set explicitly.

Second patch authored-by: David Llewellyn-Jones <david@flypig.co.uk>
---
 dom/media/platforms/PDMFactory.cpp            |  13 +
 .../gecko-camera/GeckoCameraDecoderModule.cpp |  58 ++++
 .../gecko-camera/GeckoCameraDecoderModule.h   |  49 +++
 .../gecko-camera/GeckoCameraVideoDecoder.cpp  | 301 ++++++++++++++++++
 .../gecko-camera/GeckoCameraVideoDecoder.h    |  88 +++++
 dom/media/platforms/moz.build                 |  11 +
 modules/libpref/init/StaticPrefList.yaml      |  13 +
 7 files changed, 533 insertions(+)
 create mode 100644 dom/media/platforms/gecko-camera/GeckoCameraDecoderModule.cpp
 create mode 100644 dom/media/platforms/gecko-camera/GeckoCameraDecoderModule.h
 create mode 100644 dom/media/platforms/gecko-camera/GeckoCameraVideoDecoder.cpp
 create mode 100644 dom/media/platforms/gecko-camera/GeckoCameraVideoDecoder.h

diff --git a/dom/media/platforms/PDMFactory.cpp b/dom/media/platforms/PDMFactory.cpp
index c55cb0ebe0bb..e08d3b552641 100644
--- a/dom/media/platforms/PDMFactory.cpp
+++ b/dom/media/platforms/PDMFactory.cpp
@@ -55,6 +55,10 @@
 #ifdef MOZ_OMX
 #  include "OmxDecoderModule.h"
 #endif
+#ifdef MOZ_EMBEDLITE
+#  include "GeckoCameraDecoderModule.h"
+#endif
+
 
 #include <functional>
 
@@ -139,6 +143,9 @@ class PDMInitializer final {
 #endif
 #ifdef MOZ_FFMPEG
     FFmpegRuntimeLinker::Init();
+#endif
+#ifdef MOZ_EMBEDLITE
+    GeckoCameraDecoderModule::Init();
 #endif
   }
 
@@ -594,6 +601,12 @@ void PDMFactory::CreateDefaultPDMs() {
                StaticPrefs::media_android_media_codec_preferred());
   }
 #endif
+#ifdef MOZ_EMBEDLITE
+  if (StaticPrefs::media_gecko_camera_codec_enabled()) {
+    StartupPDM(GeckoCameraDecoderModule::Create(),
+               StaticPrefs::media_gecko_camera_codec_preferred());
+  }
+#endif
 
   CreateAndStartupPDM<AgnosticDecoderModule>();
 }
diff --git a/dom/media/platforms/gecko-camera/GeckoCameraDecoderModule.cpp b/dom/media/platforms/gecko-camera/GeckoCameraDecoderModule.cpp
new file mode 100644
index 000000000000..f67faea75b9f
--- /dev/null
+++ b/dom/media/platforms/gecko-camera/GeckoCameraDecoderModule.cpp
@@ -0,0 +1,58 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim:set ts=2 sw=2 sts=2 et cindent: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "GeckoCameraDecoderModule.h"
+#include "GeckoCameraVideoDecoder.h"
+
+namespace mozilla {
+
+bool GeckoCameraDecoderModule::sInitialized = false;
+gecko::codec::CodecManager* GeckoCameraDecoderModule::sCodecManager = nullptr;
+
+void GeckoCameraDecoderModule::Init() {
+  if (sInitialized) {
+    return;
+  }
+  sCodecManager = gecko_codec_manager();
+  if (sCodecManager) {
+    sInitialized = sCodecManager->init();
+  }
+}
+
+nsresult GeckoCameraDecoderModule::Startup() {
+  if (!sInitialized || !sCodecManager) {
+    return NS_ERROR_FAILURE;
+  }
+  return NS_OK;
+}
+
+already_AddRefed<MediaDataDecoder> GeckoCameraDecoderModule::CreateVideoDecoder(
+    const CreateDecoderParams& aParams) {
+  if (sInitialized && sCodecManager) {
+    RefPtr<MediaDataDecoder> decoder = new GeckoCameraVideoDecoder(sCodecManager, aParams);
+    return decoder.forget();
+  }
+  return nullptr;
+}
+
+already_AddRefed<MediaDataDecoder> GeckoCameraDecoderModule::CreateAudioDecoder(
+    const CreateDecoderParams& aParams) {
+  return nullptr;
+}
+
+bool GeckoCameraDecoderModule::SupportsMimeType(
+    const nsACString& aMimeType, DecoderDoctorDiagnostics* aDiagnostics) const {
+  return (sInitialized && sCodecManager
+          && sCodecManager->videoDecoderAvailable(
+            GeckoCameraVideoDecoder::CodecTypeFromMime(aMimeType)));
+}
+
+/* static */
+already_AddRefed<PlatformDecoderModule> GeckoCameraDecoderModule::Create() {
+  return MakeAndAddRef<GeckoCameraDecoderModule>();
+}
+
+}  // namespace mozilla
diff --git a/dom/media/platforms/gecko-camera/GeckoCameraDecoderModule.h b/dom/media/platforms/gecko-camera/GeckoCameraDecoderModule.h
new file mode 100644
index 000000000000..288d473d5192
--- /dev/null
+++ b/dom/media/platforms/gecko-camera/GeckoCameraDecoderModule.h
@@ -0,0 +1,49 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim:set ts=2 sw=2 sts=2 et cindent: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_GeckoCameraDecoderModule_h
+#define mozilla_GeckoCameraDecoderModule_h
+
+#include <geckocamera-codec.h>
+
+#include "MP4Decoder.h"
+#include "VPXDecoder.h"
+
+#include "PlatformDecoderModule.h"
+
+namespace mozilla {
+
+class GeckoCameraDecoderModule : public PlatformDecoderModule {
+  template <typename T, typename... Args>
+  friend already_AddRefed<T> MakeAndAddRef(Args&&...);
+
+ public:
+  static already_AddRefed<PlatformDecoderModule> Create();
+
+  nsresult Startup() override;
+
+  already_AddRefed<MediaDataDecoder> CreateVideoDecoder(
+      const CreateDecoderParams& aParams) override;
+
+  already_AddRefed<MediaDataDecoder> CreateAudioDecoder(
+      const CreateDecoderParams& aParams) override;
+
+  bool SupportsMimeType(const nsACString& aMimeType,
+                        DecoderDoctorDiagnostics* aDiagnostics) const override;
+
+  static void Init();
+
+ private:
+  GeckoCameraDecoderModule() = default;
+  virtual ~GeckoCameraDecoderModule() = default;
+
+  static bool sInitialized;
+  static gecko::codec::CodecManager* sCodecManager;
+};
+
+}  // namespace mozilla
+
+#endif  // mozilla_GeckoCameraDecoderModule_h
diff --git a/dom/media/platforms/gecko-camera/GeckoCameraVideoDecoder.cpp b/dom/media/platforms/gecko-camera/GeckoCameraVideoDecoder.cpp
new file mode 100644
index 000000000000..9c1037293cd8
--- /dev/null
+++ b/dom/media/platforms/gecko-camera/GeckoCameraVideoDecoder.cpp
@@ -0,0 +1,301 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim:set ts=2 sw=2 sts=2 et cindent: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "mozilla/AbstractThread.h"
+
+#include "GeckoCameraVideoDecoder.h"
+#include "AnnexB.h"
+#include "H264.h"
+#include "MP4Decoder.h"
+#include "VPXDecoder.h"
+#include "VideoUtils.h"
+
+#define LOG(...) DDMOZ_LOG(sPDMLog, mozilla::LogLevel::Debug, __VA_ARGS__)
+#define LOGEX(_this, ...) \
+  DDMOZ_LOGEX(_this, sPDMLog, mozilla::LogLevel::Debug, __VA_ARGS__)
+
+namespace mozilla {
+
+GeckoCameraVideoDecoder::GeckoCameraVideoDecoder(
+    gecko::codec::CodecManager* manager,
+    const CreateDecoderParams& aParams)
+    : mCodecManager(manager),
+      mParams(aParams),
+      mInfo(aParams.VideoConfig()),
+      mImageContainer(aParams.mImageContainer),
+      mImageAllocator(aParams.mKnowsCompositor),
+      mMutex("GeckoCameraVideoDecoder::mMutex"),
+      mTaskQueue(new TaskQueue(
+          GetMediaThreadPool(MediaThreadType::PLATFORM_DECODER), "GeckoCameraVideoDecoder")),
+      mIsH264(MP4Decoder::IsH264(aParams.mConfig.mMimeType)),
+      mMaxRefFrames(mIsH264 ? H264::HasSPS(aParams.VideoConfig().mExtraData)
+                                  ? H264::ComputeMaxRefFrames(
+                                        aParams.VideoConfig().mExtraData)
+                                  : 16
+                            : 0),
+      mIsShutDown(false),
+      mError(false),
+      mDecodeTimer(new MediaTimer()),
+      mCommandTaskQueue(CreateMediaDecodeTaskQueue("GeckoCameraVideoDecoder")) {
+  MOZ_COUNT_CTOR(GeckoCameraVideoDecoder);
+  LOG("GeckoCameraVideoDecoder - mMaxRefFrames=%d", mMaxRefFrames);
+}
+
+RefPtr<MediaDataDecoder::InitPromise> GeckoCameraVideoDecoder::Init() {
+  MediaResult rv = CreateDecoder();
+  if (NS_SUCCEEDED(rv)) {
+    return InitPromise::CreateAndResolve(mParams.mConfig.GetType(), __func__);
+  }
+  return InitPromise::CreateAndReject(rv, __func__);
+}
+
+RefPtr<ShutdownPromise> GeckoCameraVideoDecoder::Shutdown() {
+  RefPtr<GeckoCameraVideoDecoder> self = this;
+  return InvokeAsync(mTaskQueue, __func__, [this, self]() {
+      LOG("Shutdown");
+      mIsShutDown = true;
+      mDecoder->stop();
+      mDecoder.reset();
+      MutexAutoLock lock(mMutex);
+      mInputFrames.clear();
+      return ShutdownPromise::CreateAndResolve(true, __func__);
+  });
+}
+
+RefPtr<MediaDataDecoder::DecodePromise> GeckoCameraVideoDecoder::Decode(
+    MediaRawData* aSample) {
+  LOG("mp4 input sample %p pts %lld duration %lld us%s %zu bytes", aSample,
+      aSample->mTime.ToMicroseconds(), aSample->mDuration.ToMicroseconds(),
+      aSample->mKeyframe ? " keyframe" : "", aSample->Size());
+
+  RefPtr<MediaRawData> sample = aSample;
+  RefPtr<GeckoCameraVideoDecoder> self = this;
+  return InvokeAsync(mTaskQueue, __func__, [self, this, sample] {
+    RefPtr<DecodePromise> p = mDecodePromise.Ensure(__func__);
+
+    // Throw an error if the decoder is blocked for more than a second.
+    const TimeDuration decodeTimeout = TimeDuration::FromMilliseconds(1000);
+    mDecodeTimer->WaitFor(decodeTimeout, __func__)
+        ->Then(
+            // To ublock decode(), drain the decoder on a separate thread from
+            // the decoder pool. gecko-camera must handle this without issue.
+            mCommandTaskQueue, __func__,
+            [self = RefPtr<GeckoCameraVideoDecoder>(this), this]() {
+              LOG("Decode is blocked for too long");
+              mError = true;
+              mDecoder->drain();
+            },
+            [] {});
+    ProcessDecode(sample);
+    mDecodeTimer->Cancel();
+    return p;
+  });
+}
+
+RefPtr<MediaDataDecoder::DecodePromise> GeckoCameraVideoDecoder::Drain() {
+  RefPtr<GeckoCameraVideoDecoder> self = this;
+  return InvokeAsync(mTaskQueue, __func__, [self, this] {
+    LOG("Drain");
+    mDecoder->drain();
+
+    MutexAutoLock lock(mMutex);
+    DecodedData samples;
+    while (!mReorderQueue.IsEmpty()) {
+      samples.AppendElement(mReorderQueue.Pop().get());
+    }
+    return DecodePromise::CreateAndResolve(std::move(samples), __func__);
+  });
+}
+
+RefPtr<MediaDataDecoder::FlushPromise> GeckoCameraVideoDecoder::Flush() {
+  RefPtr<GeckoCameraVideoDecoder> self = this;
+  return InvokeAsync(mTaskQueue, __func__, [self, this] {
+    LOG("Flush");
+    mDecoder->flush();
+    MutexAutoLock lock(mMutex);
+    mReorderQueue.Clear();
+    mInputFrames.clear();
+    // Clear a decoder error that may occur during flushing.
+    mError = false;
+    return FlushPromise::CreateAndResolve(true, __func__);
+  });
+}
+
+MediaDataDecoder::ConversionRequired GeckoCameraVideoDecoder::NeedsConversion()
+    const {
+  return mIsH264 ? ConversionRequired::kNeedAnnexB
+                 : ConversionRequired::kNeedNone;
+}
+
+void GeckoCameraVideoDecoder::onDecodedYCbCrFrame(const gecko::camera::YCbCrFrame *frame) {
+  MOZ_ASSERT(frame, "YCbCrFrame is null");
+
+  LOG("onDecodedFrame %llu", frame->timestampUs);
+
+  if (mIsShutDown) {
+    LOG("Decoder shuts down");
+    return;
+  }
+
+  RefPtr<MediaRawData> inputFrame;
+  {
+    MutexAutoLock lock(mMutex);
+    auto iter = mInputFrames.find(frame->timestampUs);
+    if (iter == mInputFrames.end()) {
+      LOG("Couldn't find input frame with timestamp %llu", frame->timestampUs);
+      return;
+    }
+    inputFrame = iter->second;
+    mInputFrames.erase(iter);
+  }
+
+
+  VideoData::YCbCrBuffer buffer;
+  // Y plane.
+  buffer.mPlanes[0].mData = const_cast<uint8_t*>(frame->y);
+  buffer.mPlanes[0].mStride = frame->yStride;
+  buffer.mPlanes[0].mWidth = frame->width;
+  buffer.mPlanes[0].mHeight = frame->height;
+  buffer.mPlanes[0].mSkip = 0;
+  // Cb plane.
+  buffer.mPlanes[1].mData = const_cast<uint8_t*>(frame->cb);
+  buffer.mPlanes[1].mStride = frame->cStride;
+  buffer.mPlanes[1].mWidth = (frame->width + 1) / 2;
+  buffer.mPlanes[1].mHeight = (frame->height + 1) / 2;
+  buffer.mPlanes[1].mSkip = frame->chromaStep - 1;
+  // Cr plane.
+  buffer.mPlanes[2].mData = const_cast<uint8_t*>(frame->cr);
+  buffer.mPlanes[2].mStride = frame->cStride;
+  buffer.mPlanes[2].mWidth = (frame->width + 1) / 2;
+  buffer.mPlanes[2].mHeight = (frame->height + 1) / 2;
+  buffer.mPlanes[2].mSkip = frame->chromaStep - 1;
+
+  buffer.mYUVColorSpace = DefaultColorSpace({frame->width, frame->height});
+  buffer.mColorDepth = gfx::ColorDepth::COLOR_8;
+  buffer.mColorRange = gfx::ColorRange::LIMITED;
+
+  gfx::IntRect pictureRegion(0, 0, frame->width, frame->height);
+  RefPtr<MediaData> data = VideoData::CreateAndCopyData(
+      mInfo, mImageContainer, inputFrame->mOffset,
+      inputFrame->mTime, inputFrame->mDuration,
+      buffer, inputFrame->mKeyframe, inputFrame->mTimecode,
+      pictureRegion, mImageAllocator);
+  if (!data) {
+    NS_ERROR("Couldn't create VideoData for frame");
+    return;
+  }
+
+  MutexAutoLock lock(mMutex);
+  mReorderQueue.Push(std::move(data));
+}
+
+void GeckoCameraVideoDecoder::onDecodedGraphicBuffer(std::shared_ptr<gecko::camera::GraphicBuffer> buffer)
+{
+  std::shared_ptr<const gecko::camera::YCbCrFrame> frame = buffer->mapYCbCr();
+  if (frame) {
+    onDecodedYCbCrFrame(frame.get());
+  } else {
+    NS_ERROR("Couldn't map GraphicBuffer");
+  }
+}
+
+void GeckoCameraVideoDecoder::onDecoderError(std::string errorDescription) {
+  LOG("Decoder error %s", errorDescription.c_str());
+  mError = true;
+}
+
+void GeckoCameraVideoDecoder::onDecoderEOS() {
+  LOG("Decoder EOS");
+}
+
+gecko::codec::CodecType GeckoCameraVideoDecoder::CodecTypeFromMime(
+    const nsACString& aMimeType) {
+  if (MP4Decoder::IsH264(aMimeType)) {
+    return gecko::codec::VideoCodecH264;
+  } else if (VPXDecoder::IsVP8(aMimeType)) {
+    return gecko::codec::VideoCodecVP8;
+  } else if (VPXDecoder::IsVP9(aMimeType)) {
+    return gecko::codec::VideoCodecVP9;
+  }
+  return gecko::codec::VideoCodecUnknown;
+}
+
+MediaResult GeckoCameraVideoDecoder::CreateDecoder()
+{
+  gecko::codec::VideoDecoderMetadata metadata;
+  memset(&metadata, 0, sizeof(metadata));
+
+  metadata.codecType = CodecTypeFromMime(mParams.mConfig.mMimeType);
+
+  metadata.width = mInfo.mImage.width;
+  metadata.height = mInfo.mImage.height;
+  metadata.framerate = 0;
+
+  if (mIsH264) {
+    metadata.codecSpecific = mInfo.mExtraData->Elements();
+    metadata.codecSpecificSize = mInfo.mExtraData->Length();
+  }
+
+  if (!mCodecManager->createVideoDecoder(metadata.codecType, mDecoder)) {
+    LOG("Cannot create decoder");
+    return MediaResult(NS_ERROR_DOM_MEDIA_FATAL_ERR,
+                       RESULT_DETAIL("Create decoder failed"));
+  }
+
+  if (!mDecoder->init(metadata)) {
+    LOG("Cannot initialize decoder");
+    return MediaResult(NS_ERROR_DOM_MEDIA_FATAL_ERR,
+                       RESULT_DETAIL("Init decoder failed"));
+  }
+
+  mDecoder->setListener(this);
+  return NS_OK;
+}
+
+void GeckoCameraVideoDecoder::ProcessDecode(
+    MediaRawData* aSample) {
+  MOZ_ASSERT(mTaskQueue->IsCurrentThreadIn());
+
+  if (mIsShutDown) {
+    mDecodePromise.Reject(NS_ERROR_DOM_MEDIA_CANCELED, __func__);
+    return;
+  }
+
+  if (mError) {
+    mDecodePromise.Reject(NS_ERROR_DOM_MEDIA_FATAL_ERR, __func__);
+    return;
+  }
+
+  {
+    MutexAutoLock lock(mMutex);
+    mInputFrames[aSample->mTime.ToMicroseconds()] = aSample;
+  }
+
+  // Will block here if decode queue is full.
+  bool ok = mDecoder->decode(const_cast<uint8_t*>(aSample->Data()),
+      aSample->Size(),
+      aSample->mTime.ToMicroseconds(),
+      aSample->mKeyframe ? gecko::codec::KeyFrame : gecko::codec::DeltaFrame,
+      nullptr, nullptr);
+  if (!ok) {
+    LOG("Couldn't pass frame to decoder");
+    NS_WARNING("Couldn't pass frame to decoder");
+    mDecodePromise.Reject(NS_ERROR_DOM_MEDIA_DECODE_ERR, __func__);
+    return;
+  }
+  LOG("The frame %lld sent to the decoder", aSample->mTime.ToMicroseconds());
+
+  MutexAutoLock lock(mMutex);
+  LOG("%llu decoded frames queued",
+      static_cast<unsigned long long>(mReorderQueue.Length()));
+  DecodedData results;
+  while (mReorderQueue.Length() > mMaxRefFrames) {
+    results.AppendElement(mReorderQueue.Pop());
+  }
+  mDecodePromise.Resolve(std::move(results), __func__);
+}
+
+}  // namespace mozilla
diff --git a/dom/media/platforms/gecko-camera/GeckoCameraVideoDecoder.h b/dom/media/platforms/gecko-camera/GeckoCameraVideoDecoder.h
new file mode 100644
index 000000000000..f5fd167997c7
--- /dev/null
+++ b/dom/media/platforms/gecko-camera/GeckoCameraVideoDecoder.h
@@ -0,0 +1,88 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim:set ts=2 sw=2 sts=2 et cindent: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#if !defined(GeckoCameraVideoDecoder_h_)
+#define GeckoCameraVideoDecoder_h_
+
+#include <map>
+#include <geckocamera-codec.h>
+
+#include "MediaInfo.h"
+#include "mozilla/UniquePtr.h"
+#include "PlatformDecoderModule.h"
+#include "ReorderQueue.h"
+#include "MediaTimer.h"
+
+namespace mozilla {
+
+DDLoggedTypeDeclNameAndBase(GeckoCameraVideoDecoder, MediaDataDecoder);
+
+class GeckoCameraVideoDecoder
+    : public MediaDataDecoder,
+      public DecoderDoctorLifeLogger<GeckoCameraVideoDecoder>,
+      public gecko::codec::VideoDecoderListener {
+ public:
+  GeckoCameraVideoDecoder(gecko::codec::CodecManager* manager,
+      const CreateDecoderParams& aParams);
+
+  RefPtr<InitPromise> Init() override;
+
+  RefPtr<ShutdownPromise> Shutdown() override;
+
+  RefPtr<DecodePromise> Decode(MediaRawData* aSample) override;
+
+  RefPtr<DecodePromise> Drain() override;
+
+  RefPtr<FlushPromise> Flush() override;
+
+  ConversionRequired NeedsConversion() const override;
+
+  bool IsHardwareAccelerated(nsACString& aFailureReason) const override {
+    return true;
+  }
+
+  nsCString GetDescriptionName() const override {
+    return "gecko-camera video decoder"_ns;
+  }
+
+  bool SupportDecoderRecycling() const override {
+    return true;
+  }
+
+  // VideoDecoderListener
+  virtual void onDecodedYCbCrFrame(const gecko::camera::YCbCrFrame *frame) override;
+  virtual void onDecodedGraphicBuffer(std::shared_ptr<gecko::camera::GraphicBuffer> buffer) override;
+  virtual void onDecoderError(std::string errorDescription) override;
+  virtual void onDecoderEOS() override;
+
+  static gecko::codec::CodecType CodecTypeFromMime(const nsACString& aMimeType);
+
+ private:
+  MediaResult CreateDecoder();
+  void ProcessDecode(MediaRawData* aSample);
+  gecko::codec::CodecManager* mCodecManager;
+  const CreateDecoderParams mParams;
+  const VideoInfo mInfo;
+  const RefPtr<layers::ImageContainer> mImageContainer;
+  RefPtr<layers::KnowsCompositor> mImageAllocator;
+  Mutex mMutex;
+  const RefPtr<TaskQueue> mTaskQueue;
+  bool mIsH264;
+  const uint32_t mMaxRefFrames;
+  ReorderQueue mReorderQueue;
+  MozPromiseHolder<DecodePromise> mDecodePromise;
+  bool mIsShutDown;
+  bool mError;
+  const RefPtr<MediaTimer> mDecodeTimer;
+  const RefPtr<TaskQueue> mCommandTaskQueue;
+  std::string mErrorDescription;
+  std::shared_ptr<gecko::codec::VideoDecoder> mDecoder;
+  std::map<uint64_t,RefPtr<MediaRawData>> mInputFrames;
+};
+
+}  // namespace mozilla
+
+#endif  // !defined(GeckoCameraVideoDecoder_h_)
diff --git a/dom/media/platforms/moz.build b/dom/media/platforms/moz.build
index 16ca8a9cbc01..bd7aabbed1e4 100644
--- a/dom/media/platforms/moz.build
+++ b/dom/media/platforms/moz.build
@@ -133,6 +133,17 @@ if CONFIG["MOZ_WIDGET_TOOLKIT"] == "android":
         "/media/libyuv/libyuv/include",
     ]
 
+if CONFIG["MOZ_ENABLE_WEBRTC_GECKOCAMERA"]:
+    EXPORTS += [
+        "gecko-camera/GeckoCameraDecoderModule.h",
+    ]
+    UNIFIED_SOURCES += [
+        "gecko-camera/GeckoCameraDecoderModule.cpp",
+        "gecko-camera/GeckoCameraVideoDecoder.cpp",
+    ]
+    OS_LIBS += CONFIG["LIBGECKOCAMERA_LIBS"]
+    CXXFLAGS += CONFIG["LIBGECKOCAMERA_CFLAGS"]
+
 FINAL_LIBRARY = "xul"
 
 if CONFIG["CC_TYPE"] in ("clang", "gcc"):
diff --git a/modules/libpref/init/StaticPrefList.yaml b/modules/libpref/init/StaticPrefList.yaml
index 615143df6b5e..96c924f00398 100644
--- a/modules/libpref/init/StaticPrefList.yaml
+++ b/modules/libpref/init/StaticPrefList.yaml
@@ -8222,6 +8222,19 @@
     mirror: always
 #endif  # ANDROID
 
+#ifdef MOZ_EMBEDLITE
+  # Enable the gecko-camera based decoder by default.
+-   name: media.gecko-camera-codec.enabled
+    type: RelaxedAtomicBool
+    value: true
+    mirror: always
+
+-   name: media.gecko-camera-codec.preferred
+    type: RelaxedAtomicBool
+    value: true
+    mirror: always
+#endif  # MOZ_EMBEDLITE
+
 #ifdef MOZ_OMX
 -   name: media.omx.enabled
     type: bool

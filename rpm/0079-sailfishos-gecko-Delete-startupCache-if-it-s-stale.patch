From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: David Llewellyn-Jones <david@flypig.co.uk>
Date: Tue, 28 Jul 2020 09:39:16 +0000
Subject: [PATCH] [sailfishos][gecko] Delete startupCache if it's stale

Adds functionality to the StartupCache initialisation code to delete the
startupCache if it's older than the timestamp on
/var/lib/_MOZEMBED_CACHE_CLEAN_ .

This _MOZEMBED_CACHE_CLEAN_ should be touched whenever the packages are
updated to ensure the process works correctly.

Signed-off-by: Raine Makelainen <raine.makelainen@jolla.com>
---
 startupcache/StartupCache.cpp | 96 +++++++++++++++++++++++++++++++++++
 1 file changed, 96 insertions(+)

diff --git a/startupcache/StartupCache.cpp b/startupcache/StartupCache.cpp
index 50ce9d8e4b2c..fd9638fc118d 100644
--- a/startupcache/StartupCache.cpp
+++ b/startupcache/StartupCache.cpp
@@ -15,12 +15,14 @@
 #include "mozilla/ResultExtensions.h"
 #include "mozilla/scache/StartupCache.h"
 #include "mozilla/ScopeExit.h"
+#include "mozilla/Logging.h"
 
 #include "nsClassHashtable.h"
 #include "nsComponentManagerUtils.h"
 #include "nsCRT.h"
 #include "nsDirectoryServiceUtils.h"
 #include "nsIClassInfo.h"
+#include "nsIDirectoryEnumerator.h"
 #include "nsIFile.h"
 #include "nsIObserver.h"
 #include "nsIOutputStream.h"
@@ -60,6 +62,8 @@ using namespace mozilla::Compression;
 namespace mozilla {
 namespace scache {
 
+static LazyLogModule gStartupCachePRLog("StartupCache");
+
 MOZ_DEFINE_MALLOC_SIZE_OF(StartupCacheMallocSizeOf)
 
 NS_IMETHODIMP
@@ -169,6 +173,95 @@ StartupCache::StartupCache()
 
 StartupCache::~StartupCache() { UnregisterWeakMemoryReporter(this); }
 
+// Checks the modified date of the startupCache and deletes it if the embedlite-components-qt5
+// install is newer (determined using the modified time of /var/lib/_MOZEMBED_CACHE_CLEAN_).
+static nsresult clearStartupCacheIfNeeded() {
+  nsresult rv;
+  bool exists = false;
+  nsCOMPtr<nsIFile> systemStamp;
+
+  systemStamp = do_CreateInstance(NS_LOCAL_FILE_CONTRACTID);
+  systemStamp->InitWithPath(u"/var/lib/_MOZEMBED_CACHE_CLEAN_"_ns);
+  rv = systemStamp->Exists(&exists);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  if (!exists) {
+    return NS_OK;
+  }
+
+  nsAutoCString path;
+  PRTime lastModifiedTimeClean = 0;
+  PRTime lastModifiedTimeCache = 0;
+  nsCOMPtr<nsIFile> file;
+  rv = systemStamp->GetLastModifiedTime(&lastModifiedTimeClean);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  // See StartupCache::Init() for cache location conditions
+  char *env = PR_GetEnv("MOZ_STARTUP_CACHE");
+  if (env) {
+    rv = NS_NewLocalFile(NS_ConvertUTF8toUTF16(env), false, getter_AddRefs(file));
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    rv = file->GetLastModifiedTime(&lastModifiedTimeCache);
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    if (lastModifiedTimeCache < lastModifiedTimeClean) {
+      rv = file->GetNativePath(path);
+      NS_ENSURE_SUCCESS(rv, rv);
+      MOZ_LOG(gStartupCachePRLog, LogLevel::Debug, ("Removing stale startupCache at %s", path.get()));
+
+      // Remove the cache
+      rv = file->Remove(true);
+      NS_ENSURE_SUCCESS(rv, rv);
+    }
+  } else {
+    bool directory;
+    nsCOMPtr<nsIFile> cacheDir;
+
+    rv = NS_GetSpecialDirectory("ProfLDS", getter_AddRefs(cacheDir));
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    rv = cacheDir->AppendNative("startupCache"_ns);
+    NS_ENSURE_SUCCESS(rv, NS_OK);
+
+    rv = cacheDir->IsDirectory(&directory);
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    if (!directory) {
+      return NS_OK;
+    }
+
+    nsCOMPtr<nsIDirectoryEnumerator> dirIterator;
+    rv = cacheDir->GetDirectoryEntries(getter_AddRefs(dirIterator));
+    NS_ENSURE_SUCCESS(rv, NS_OK);
+
+    bool hasMoreElements;
+    rv = dirIterator->HasMoreElements(&hasMoreElements);
+    if (NS_SUCCEEDED(rv) && hasMoreElements) {
+      nsCOMPtr<nsISupports> supports;
+      rv = dirIterator->GetNext(getter_AddRefs(supports));
+      NS_ENSURE_SUCCESS(rv, rv);
+
+      file = do_QueryInterface(supports);
+
+      rv = file->GetLastModifiedTime(&lastModifiedTimeCache);
+      NS_ENSURE_SUCCESS(rv, rv);
+
+      if (lastModifiedTimeCache < lastModifiedTimeClean) {
+        rv = cacheDir->GetNativePath(path);
+        NS_ENSURE_SUCCESS(rv, rv);
+        MOZ_LOG(gStartupCachePRLog, LogLevel::Debug, ("Removing stale startupCache at %s", path.get()));
+
+        // Remove the cache recursively (in boolean recursive)
+        rv = cacheDir->Remove(true);
+        NS_ENSURE_SUCCESS(rv, rv);
+      }
+    }
+  }
+
+  return NS_OK;
+}
+
 nsresult StartupCache::Init() {
   // workaround for bug 653936
   nsCOMPtr<nsIProtocolHandler> jarInitializer(
@@ -180,6 +273,9 @@ nsresult StartupCache::Init() {
     STARTUP_CACHE_WRITE_TIMEOUT = 3;
   }
 
+  // Clear the startup cache if it's old
+  clearStartupCacheIfNeeded();
+
   // This allows to override the startup cache filename
   // which is useful from xpcshell, when there is no ProfLDS directory to keep
   // cache in.

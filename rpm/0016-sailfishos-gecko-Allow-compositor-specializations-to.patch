From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Raine Makelainen <raine.makelainen@jolla.com>
Date: Fri, 17 Apr 2020 12:44:15 +0300
Subject: [PATCH] [sailfishos][gecko] Allow compositor specializations to
 override the composite (part 2).

Original author: Andrew den Exter <andrew.den.exter@qinetic.com.au>
SHA1: ba21a8694e261769fa53e54a846eeaa651826769

CompositeToTarget now accepts VsyncId as first parameter.
See upstream commit: 011bd0697fc5c1a99e6c3c691aee9b13549d983b

[sailfishos][gecko] Make it possible to extend CompositorBridgeParent

Original author: Raine Makelainen <raine.makelainen@jolla.com>
---
 gfx/layers/ipc/CompositorBridgeParent.cpp      | 4 ++++
 gfx/layers/ipc/CompositorBridgeParent.h        | 3 ++-
 gfx/layers/ipc/CompositorVsyncScheduler.cpp    | 7 ++++++-
 gfx/layers/ipc/CompositorVsyncSchedulerOwner.h | 1 +
 gfx/layers/wr/WebRenderBridgeParent.cpp        | 4 ++++
 gfx/layers/wr/WebRenderBridgeParent.h          | 1 +
 6 files changed, 18 insertions(+), 2 deletions(-)

diff --git a/gfx/layers/ipc/CompositorBridgeParent.cpp b/gfx/layers/ipc/CompositorBridgeParent.cpp
index c19cfb249b35..1d3632ff15de 100644
--- a/gfx/layers/ipc/CompositorBridgeParent.cpp
+++ b/gfx/layers/ipc/CompositorBridgeParent.cpp
@@ -874,6 +874,10 @@ void CompositorBridgeParent::SetShadowProperties(Layer* aLayer) {
   });
 }
 
+void CompositorBridgeParent::CompositeToDefaultTarget(VsyncId aId) {
+  CompositeToTarget(aId, nullptr);
+}
+
 void CompositorBridgeParent::CompositeToTarget(VsyncId aId, DrawTarget* aTarget,
                                                const gfx::IntRect* aRect) {
   AUTO_PROFILER_TRACING_MARKER("Paint", "Composite", GRAPHICS);
diff --git a/gfx/layers/ipc/CompositorBridgeParent.h b/gfx/layers/ipc/CompositorBridgeParent.h
index ada1e15bd321..55024160af29 100644
--- a/gfx/layers/ipc/CompositorBridgeParent.h
+++ b/gfx/layers/ipc/CompositorBridgeParent.h
@@ -308,7 +308,7 @@ class CompositorBridgeParentBase : public PCompositorBridgeParent,
 MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS(
     CompositorBridgeParentBase::TransformsToSkip)
 
-class CompositorBridgeParent final : public CompositorBridgeParentBase,
+class CompositorBridgeParent : public CompositorBridgeParentBase,
                                      public CompositorController,
                                      public CompositorVsyncSchedulerOwner {
   friend class CompositorThreadHolder;
@@ -740,6 +740,7 @@ class CompositorBridgeParent final : public CompositorBridgeParentBase,
   void FinishPendingComposite() override;
   void CompositeToTarget(VsyncId aId, gfx::DrawTarget* aTarget,
                          const gfx::IntRect* aRect = nullptr) override;
+  virtual void CompositeToDefaultTarget(VsyncId aId) override;
 
   RefPtr<Compositor> NewCompositor(
       const nsTArray<LayersBackend>& aBackendHints);
diff --git a/gfx/layers/ipc/CompositorVsyncScheduler.cpp b/gfx/layers/ipc/CompositorVsyncScheduler.cpp
index 4662a1e3ae7e..2e8e58a2c46b 100644
--- a/gfx/layers/ipc/CompositorVsyncScheduler.cpp
+++ b/gfx/layers/ipc/CompositorVsyncScheduler.cpp
@@ -254,6 +254,7 @@ void CompositorVsyncScheduler::Composite(const VsyncEvent& aVsyncEvent) {
 
     // Tell the owner to do a composite
     mVsyncSchedulerOwner->CompositeToTarget(aVsyncEvent.mId, nullptr, nullptr);
+    mVsyncSchedulerOwner->CompositeToDefaultTarget(aVsyncEvent.mId);
 
     mVsyncNotificationsSkipped = 0;
 
@@ -289,7 +290,11 @@ void CompositorVsyncScheduler::ForceComposeToTarget(gfx::DrawTarget* aTarget,
 
   mLastComposeTime = SampleTime::FromNow();
   MOZ_ASSERT(mVsyncSchedulerOwner);
-  mVsyncSchedulerOwner->CompositeToTarget(VsyncId(), aTarget, aRect);
+  if (aTarget) {
+      mVsyncSchedulerOwner->CompositeToTarget(VsyncId(), aTarget, aRect);
+  } else {
+      mVsyncSchedulerOwner->CompositeToDefaultTarget(VsyncId());
+  }
 }
 
 bool CompositorVsyncScheduler::NeedsComposite() {
diff --git a/gfx/layers/ipc/CompositorVsyncSchedulerOwner.h b/gfx/layers/ipc/CompositorVsyncSchedulerOwner.h
index 1691f6535ae3..5df8fdc2902b 100644
--- a/gfx/layers/ipc/CompositorVsyncSchedulerOwner.h
+++ b/gfx/layers/ipc/CompositorVsyncSchedulerOwner.h
@@ -24,6 +24,7 @@ class CompositorVsyncSchedulerOwner {
   virtual void CompositeToTarget(VsyncId aId, gfx::DrawTarget* aTarget,
                                  const gfx::IntRect* aRect = nullptr) = 0;
   virtual TimeDuration GetVsyncInterval() const = 0;
+  virtual void CompositeToDefaultTarget(VsyncId aId) = 0;
 };
 
 }  // namespace layers
diff --git a/gfx/layers/wr/WebRenderBridgeParent.cpp b/gfx/layers/wr/WebRenderBridgeParent.cpp
index 526357b3bddb..c12a4a53228b 100644
--- a/gfx/layers/wr/WebRenderBridgeParent.cpp
+++ b/gfx/layers/wr/WebRenderBridgeParent.cpp
@@ -2680,5 +2680,9 @@ WebRenderBridgeParentRef::~WebRenderBridgeParentRef() {
   MOZ_ASSERT(!mWebRenderBridge);
 }
 
+void mozilla::layers::WebRenderBridgeParent::CompositeToDefaultTarget(VsyncId aId) {
+  CompositeToTarget(aId, nullptr);
+}
+
 }  // namespace layers
 }  // namespace mozilla
diff --git a/gfx/layers/wr/WebRenderBridgeParent.h b/gfx/layers/wr/WebRenderBridgeParent.h
index 9bb12ee86e96..1fdd1f048dfa 100644
--- a/gfx/layers/wr/WebRenderBridgeParent.h
+++ b/gfx/layers/wr/WebRenderBridgeParent.h
@@ -183,6 +183,7 @@ class WebRenderBridgeParent final : public PWebRenderBridgeParent,
   void FinishPendingComposite() override {}
   void CompositeToTarget(VsyncId aId, gfx::DrawTarget* aTarget,
                          const gfx::IntRect* aRect = nullptr) override;
+  virtual void CompositeToDefaultTarget(VsyncId aId) override;
   TimeDuration GetVsyncInterval() const override;
 
   // CompositableParentManager
